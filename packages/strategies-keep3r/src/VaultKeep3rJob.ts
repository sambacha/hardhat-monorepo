/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultKeep3rJobInterface extends utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "FASTGAS()": FunctionFragment;
    "MAX_REWARD_MULTIPLIER()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "addVault(address,uint256)": FunctionFragment;
    "addVaults(address[],uint256[])": FunctionFragment;
    "age()": FunctionFragment;
    "bond()": FunctionFragment;
    "calculateEarn(address)": FunctionFragment;
    "earnCooldown()": FunctionFragment;
    "earned()": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMechanic(address)": FunctionFragment;
    "keep3r()": FunctionFragment;
    "lastEarnAt(address)": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "mechanicsRegistry()": FunctionFragment;
    "minBond()": FunctionFragment;
    "onlyEOA()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "removeVault(address)": FunctionFragment;
    "requiredEarn(address)": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setEarnCooldown(uint256)": FunctionFragment;
    "setKeep3r(address)": FunctionFragment;
    "setKeep3rRequirements(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "setMaxGasPrice(uint256)": FunctionFragment;
    "setMechanicsRegistry(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "updateVault(address,uint256)": FunctionFragment;
    "updateVaults(address[],uint256[])": FunctionFragment;
    "vaults()": FunctionFragment;
    "work(address)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FASTGAS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaults",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "age", values?: undefined): string;
  encodeFunctionData(functionFragment: "bond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateEarn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "earnCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values?: undefined): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isMechanic", values: [string]): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastEarnAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mechanicsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minBond", values?: undefined): string;
  encodeFunctionData(functionFragment: "onlyEOA", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "requiredEarn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setKeep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeep3rRequirements",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMechanicsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaults",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values?: undefined): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FASTGAS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "age", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMechanic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastEarnAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onlyEOA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEarnCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "DustSent(address,address,uint256)": EventFragment;
    "ForceWorked(address)": EventFragment;
    "GovernorAccepted()": EventFragment;
    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)": EventFragment;
    "Keep3rSet(address)": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingGovernorSet(address)": EventFragment;
    "SetMaxGasPrice(uint256)": EventFragment;
    "SetRewardMultiplier(uint256)": EventFragment;
    "VaultAdded(address,uint256)": EventFragment;
    "VaultModified(address,uint256)": EventFragment;
    "VaultRemoved(address)": EventFragment;
    "Worked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rRequirementsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingGovernorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGasPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type DustSentEvent = TypedEvent<
  [string, string, BigNumber],
  { _to: string; token: string; amount: BigNumber }
>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export type ForceWorkedEvent = TypedEvent<[string], { _vault: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter =
  TypedEventFilter<GovernorAcceptedEvent>;

export type Keep3rRequirementsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  {
    _bond: string;
    _minBond: BigNumber;
    _earned: BigNumber;
    _age: BigNumber;
    _onlyEOA: boolean;
  }
>;

export type Keep3rRequirementsSetEventFilter =
  TypedEventFilter<Keep3rRequirementsSetEvent>;

export type Keep3rSetEvent = TypedEvent<[string], { _keep3r: string }>;

export type Keep3rSetEventFilter = TypedEventFilter<Keep3rSetEvent>;

export type PausedEvent = TypedEvent<[boolean], { _paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PendingGovernorSetEvent = TypedEvent<
  [string],
  { pendingGovernor: string }
>;

export type PendingGovernorSetEventFilter =
  TypedEventFilter<PendingGovernorSetEvent>;

export type SetMaxGasPriceEvent = TypedEvent<
  [BigNumber],
  { _maxGasPrice: BigNumber }
>;

export type SetMaxGasPriceEventFilter = TypedEventFilter<SetMaxGasPriceEvent>;

export type SetRewardMultiplierEvent = TypedEvent<
  [BigNumber],
  { _rewardMultiplier: BigNumber }
>;

export type SetRewardMultiplierEventFilter =
  TypedEventFilter<SetRewardMultiplierEvent>;

export type VaultAddedEvent = TypedEvent<
  [string, BigNumber],
  { _vault: string; _requiredEarn: BigNumber }
>;

export type VaultAddedEventFilter = TypedEventFilter<VaultAddedEvent>;

export type VaultModifiedEvent = TypedEvent<
  [string, BigNumber],
  { _vault: string; _requiredEarn: BigNumber }
>;

export type VaultModifiedEventFilter = TypedEventFilter<VaultModifiedEvent>;

export type VaultRemovedEvent = TypedEvent<[string], { _vault: string }>;

export type VaultRemovedEventFilter = TypedEventFilter<VaultRemovedEvent>;

export type WorkedEvent = TypedEvent<
  [string, string, BigNumber],
  { _vault: string; _keeper: string; _credits: BigNumber }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface VaultKeep3rJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultKeep3rJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    FASTGAS(overrides?: CallOverrides): Promise<[string]>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    age(overrides?: CallOverrides): Promise<[BigNumber]>;

    bond(overrides?: CallOverrides): Promise<[string]>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    earnCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGovernor: boolean }>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isMechanic: boolean }>;

    keep3r(overrides?: CallOverrides): Promise<[string] & { _keep3r: string }>;

    lastEarnAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mechanicsRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { _mechanicRegistry: string }>;

    minBond(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyEOA(overrides?: CallOverrides): Promise<[boolean]>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _vaults: string[] }>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  FASTGAS(overrides?: CallOverrides): Promise<string>;

  MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVault(
    _vault: string,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaults(
    _vaults: string[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  age(overrides?: CallOverrides): Promise<BigNumber>;

  bond(overrides?: CallOverrides): Promise<string>;

  calculateEarn(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  earnCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  earned(overrides?: CallOverrides): Promise<BigNumber>;

  forceWork(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  lastEarnAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

  minBond(overrides?: CallOverrides): Promise<BigNumber>;

  onlyEOA(overrides?: CallOverrides): Promise<boolean>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  removeVault(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarnCooldown(
    _earnCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3r(
    _keep3r: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rRequirements(
    _bond: string,
    _minBond: BigNumberish,
    _earned: BigNumberish,
    _age: BigNumberish,
    _onlyEOA: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMechanicsRegistry(
    _mechanicsRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    _rewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: string,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVaults(
    _vaults: string[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(overrides?: CallOverrides): Promise<string[]>;

  work(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    FASTGAS(overrides?: CallOverrides): Promise<string>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<string>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(_vault: string, overrides?: CallOverrides): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    lastEarnAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<boolean>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    removeVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3r(_keep3r: string, overrides?: CallOverrides): Promise<void>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(overrides?: CallOverrides): Promise<string[]>;

    work(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    workable(_vault: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "DustSent(address,address,uint256)"(
      _to?: null,
      token?: null,
      amount?: null
    ): DustSentEventFilter;
    DustSent(_to?: null, token?: null, amount?: null): DustSentEventFilter;

    "ForceWorked(address)"(_vault?: null): ForceWorkedEventFilter;
    ForceWorked(_vault?: null): ForceWorkedEventFilter;

    "GovernorAccepted()"(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)"(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;
    Keep3rRequirementsSet(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;

    "Keep3rSet(address)"(_keep3r?: null): Keep3rSetEventFilter;
    Keep3rSet(_keep3r?: null): Keep3rSetEventFilter;

    "Paused(bool)"(_paused?: null): PausedEventFilter;
    Paused(_paused?: null): PausedEventFilter;

    "PendingGovernorSet(address)"(
      pendingGovernor?: null
    ): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;

    "SetMaxGasPrice(uint256)"(_maxGasPrice?: null): SetMaxGasPriceEventFilter;
    SetMaxGasPrice(_maxGasPrice?: null): SetMaxGasPriceEventFilter;

    "SetRewardMultiplier(uint256)"(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;
    SetRewardMultiplier(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;

    "VaultAdded(address,uint256)"(
      _vault?: null,
      _requiredEarn?: null
    ): VaultAddedEventFilter;
    VaultAdded(_vault?: null, _requiredEarn?: null): VaultAddedEventFilter;

    "VaultModified(address,uint256)"(
      _vault?: null,
      _requiredEarn?: null
    ): VaultModifiedEventFilter;
    VaultModified(
      _vault?: null,
      _requiredEarn?: null
    ): VaultModifiedEventFilter;

    "VaultRemoved(address)"(_vault?: null): VaultRemovedEventFilter;
    VaultRemoved(_vault?: null): VaultRemovedEventFilter;

    "Worked(address,address,uint256)"(
      _vault?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
    Worked(_vault?: null, _keeper?: null, _credits?: null): WorkedEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    FASTGAS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    lastEarnAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FASTGAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REWARD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    age(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEarnAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyEOA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredEarn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
