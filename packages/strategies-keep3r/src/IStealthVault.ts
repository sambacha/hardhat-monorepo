/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStealthVaultInterface extends utils.Interface {
  functions: {
    "bond()": FunctionFragment;
    "bonded(address)": FunctionFragment;
    "caller(address)": FunctionFragment;
    "callerContracts(address)": FunctionFragment;
    "callerStealthContract(address,address)": FunctionFragment;
    "callers()": FunctionFragment;
    "canUnbondAt(address)": FunctionFragment;
    "cancelUnbond()": FunctionFragment;
    "disableStealthContract(address)": FunctionFragment;
    "disableStealthContracts(address[])": FunctionFragment;
    "enableStealthContract(address)": FunctionFragment;
    "enableStealthContracts(address[])": FunctionFragment;
    "gasBuffer()": FunctionFragment;
    "hashReportedBy(bytes32)": FunctionFragment;
    "isStealthVault()": FunctionFragment;
    "reportHash(bytes32)": FunctionFragment;
    "reportHashAndPay(bytes32)": FunctionFragment;
    "setGasBuffer(uint256)": FunctionFragment;
    "startUnbond()": FunctionFragment;
    "totalBonded()": FunctionFragment;
    "transferBondToGovernor(address,uint256)": FunctionFragment;
    "transferGovernorBond(address,uint256)": FunctionFragment;
    "unbond(uint256)": FunctionFragment;
    "unbondAll()": FunctionFragment;
    "validateHash(address,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bond", values?: undefined): string;
  encodeFunctionData(functionFragment: "bonded", values: [string]): string;
  encodeFunctionData(functionFragment: "caller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "callerContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callerStealthContract",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "callers", values?: undefined): string;
  encodeFunctionData(functionFragment: "canUnbondAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelUnbond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableStealthContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableStealthContracts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableStealthContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableStealthContracts",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "gasBuffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashReportedBy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStealthVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportHashAndPay",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startUnbond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBonded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferBondToGovernor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernorBond",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unbondAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateHash",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "caller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callerStealthContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUnbondAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnbond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableStealthContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableStealthContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableStealthContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableStealthContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashReportedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStealthVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportHashAndPay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startUnbond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBondToGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernorBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbondAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateHash",
    data: BytesLike
  ): Result;

  events: {
    "Bonded(address,uint256,uint256)": EventFragment;
    "PenaltyApplied(bytes32,address,uint256,address)": EventFragment;
    "ReportedHash(bytes32,address)": EventFragment;
    "StealthContractDisabled(address,address)": EventFragment;
    "StealthContractEnabled(address,address)": EventFragment;
    "StealthContractsDisabled(address,address[])": EventFragment;
    "StealthContractsEnabled(address,address[])": EventFragment;
    "Unbonded(address,uint256,uint256)": EventFragment;
    "ValidatedHash(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PenaltyApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportedHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthContractDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthContractEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthContractsDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthContractsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatedHash"): EventFragment;
}

export type BondedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _caller: string; _amount: BigNumber; _finalBond: BigNumber }
>;

export type BondedEventFilter = TypedEventFilter<BondedEvent>;

export type PenaltyAppliedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { _hash: string; _caller: string; _penalty: BigNumber; _reportedBy: string }
>;

export type PenaltyAppliedEventFilter = TypedEventFilter<PenaltyAppliedEvent>;

export type ReportedHashEvent = TypedEvent<
  [string, string],
  { _hash: string; _reportedBy: string }
>;

export type ReportedHashEventFilter = TypedEventFilter<ReportedHashEvent>;

export type StealthContractDisabledEvent = TypedEvent<
  [string, string],
  { _caller: string; _contract: string }
>;

export type StealthContractDisabledEventFilter =
  TypedEventFilter<StealthContractDisabledEvent>;

export type StealthContractEnabledEvent = TypedEvent<
  [string, string],
  { _caller: string; _contract: string }
>;

export type StealthContractEnabledEventFilter =
  TypedEventFilter<StealthContractEnabledEvent>;

export type StealthContractsDisabledEvent = TypedEvent<
  [string, string[]],
  { _caller: string; _contracts: string[] }
>;

export type StealthContractsDisabledEventFilter =
  TypedEventFilter<StealthContractsDisabledEvent>;

export type StealthContractsEnabledEvent = TypedEvent<
  [string, string[]],
  { _caller: string; _contracts: string[] }
>;

export type StealthContractsEnabledEventFilter =
  TypedEventFilter<StealthContractsEnabledEvent>;

export type UnbondedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _caller: string; _amount: BigNumber; _finalBond: BigNumber }
>;

export type UnbondedEventFilter = TypedEventFilter<UnbondedEvent>;

export type ValidatedHashEvent = TypedEvent<
  [string, string, BigNumber],
  { _hash: string; _caller: string; _penalty: BigNumber }
>;

export type ValidatedHashEventFilter = TypedEventFilter<ValidatedHashEvent>;

export interface IStealthVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStealthVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bond(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonded(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _bond: BigNumber }>;

    caller(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _enabled: boolean }>;

    callerContracts(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _contracts: string[] }>;

    callerStealthContract(
      _caller: string,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _enabled: boolean }>;

    callers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _callers: string[] }>;

    canUnbondAt(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _canUnbondAt: BigNumber }>;

    cancelUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasBuffer(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _gasBuffer: BigNumber }>;

    hashReportedBy(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _reportedBy: string }>;

    isStealthVault(overrides?: CallOverrides): Promise<[boolean]>;

    reportHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportHashAndPay(
      _hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasBuffer(
      _gasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBonded(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalBonded: BigNumber }>;

    transferBondToGovernor(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovernorBond(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbondAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateHash(
      _caller: string,
      _hash: BytesLike,
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bond(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonded(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

  caller(_caller: string, overrides?: CallOverrides): Promise<boolean>;

  callerContracts(
    _caller: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callerStealthContract(
    _caller: string,
    _contract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callers(overrides?: CallOverrides): Promise<string[]>;

  canUnbondAt(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelUnbond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableStealthContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableStealthContracts(
    _contracts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableStealthContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableStealthContracts(
    _contracts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  hashReportedBy(_hash: BytesLike, overrides?: CallOverrides): Promise<string>;

  isStealthVault(overrides?: CallOverrides): Promise<boolean>;

  reportHash(
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportHashAndPay(
    _hash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasBuffer(
    _gasBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startUnbond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBonded(overrides?: CallOverrides): Promise<BigNumber>;

  transferBondToGovernor(
    _caller: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovernorBond(
    _caller: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbond(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbondAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateHash(
    _caller: string,
    _hash: BytesLike,
    _penalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bond(overrides?: CallOverrides): Promise<void>;

    bonded(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    caller(_caller: string, overrides?: CallOverrides): Promise<boolean>;

    callerContracts(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    callerStealthContract(
      _caller: string,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    callers(overrides?: CallOverrides): Promise<string[]>;

    canUnbondAt(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelUnbond(overrides?: CallOverrides): Promise<void>;

    disableStealthContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableStealthContracts(
      _contracts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    enableStealthContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableStealthContracts(
      _contracts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    gasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    hashReportedBy(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isStealthVault(overrides?: CallOverrides): Promise<boolean>;

    reportHash(_hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    reportHashAndPay(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasBuffer(
      _gasBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startUnbond(overrides?: CallOverrides): Promise<void>;

    totalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    transferBondToGovernor(
      _caller: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernorBond(
      _caller: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unbondAll(overrides?: CallOverrides): Promise<void>;

    validateHash(
      _caller: string,
      _hash: BytesLike,
      _penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Bonded(address,uint256,uint256)"(
      _caller?: string | null,
      _amount?: null,
      _finalBond?: null
    ): BondedEventFilter;
    Bonded(
      _caller?: string | null,
      _amount?: null,
      _finalBond?: null
    ): BondedEventFilter;

    "PenaltyApplied(bytes32,address,uint256,address)"(
      _hash?: null,
      _caller?: null,
      _penalty?: null,
      _reportedBy?: null
    ): PenaltyAppliedEventFilter;
    PenaltyApplied(
      _hash?: null,
      _caller?: null,
      _penalty?: null,
      _reportedBy?: null
    ): PenaltyAppliedEventFilter;

    "ReportedHash(bytes32,address)"(
      _hash?: null,
      _reportedBy?: null
    ): ReportedHashEventFilter;
    ReportedHash(_hash?: null, _reportedBy?: null): ReportedHashEventFilter;

    "StealthContractDisabled(address,address)"(
      _caller?: string | null,
      _contract?: null
    ): StealthContractDisabledEventFilter;
    StealthContractDisabled(
      _caller?: string | null,
      _contract?: null
    ): StealthContractDisabledEventFilter;

    "StealthContractEnabled(address,address)"(
      _caller?: string | null,
      _contract?: null
    ): StealthContractEnabledEventFilter;
    StealthContractEnabled(
      _caller?: string | null,
      _contract?: null
    ): StealthContractEnabledEventFilter;

    "StealthContractsDisabled(address,address[])"(
      _caller?: string | null,
      _contracts?: null
    ): StealthContractsDisabledEventFilter;
    StealthContractsDisabled(
      _caller?: string | null,
      _contracts?: null
    ): StealthContractsDisabledEventFilter;

    "StealthContractsEnabled(address,address[])"(
      _caller?: string | null,
      _contracts?: null
    ): StealthContractsEnabledEventFilter;
    StealthContractsEnabled(
      _caller?: string | null,
      _contracts?: null
    ): StealthContractsEnabledEventFilter;

    "Unbonded(address,uint256,uint256)"(
      _caller?: string | null,
      _amount?: null,
      _finalBond?: null
    ): UnbondedEventFilter;
    Unbonded(
      _caller?: string | null,
      _amount?: null,
      _finalBond?: null
    ): UnbondedEventFilter;

    "ValidatedHash(bytes32,address,uint256)"(
      _hash?: null,
      _caller?: null,
      _penalty?: null
    ): ValidatedHashEventFilter;
    ValidatedHash(
      _hash?: null,
      _caller?: null,
      _penalty?: null
    ): ValidatedHashEventFilter;
  };

  estimateGas: {
    bond(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonded(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    caller(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    callerContracts(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callerStealthContract(
      _caller: string,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callers(overrides?: CallOverrides): Promise<BigNumber>;

    canUnbondAt(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    hashReportedBy(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStealthVault(overrides?: CallOverrides): Promise<BigNumber>;

    reportHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportHashAndPay(
      _hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasBuffer(
      _gasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    transferBondToGovernor(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovernorBond(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbondAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateHash(
      _caller: string,
      _hash: BytesLike,
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bond(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonded(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    caller(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callerContracts(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callerStealthContract(
      _caller: string,
      _contract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canUnbondAt(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableStealthContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableStealthContracts(
      _contracts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashReportedBy(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStealthVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportHash(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportHashAndPay(
      _hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasBuffer(
      _gasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startUnbond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBonded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferBondToGovernor(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernorBond(
      _caller: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbondAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateHash(
      _caller: string,
      _hash: BytesLike,
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
