/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface HarvestV2DetachedGaslessJobInterface extends utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "V2Keeper()": FunctionFragment;
    "WETH()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "addStrategies(address[],address[],address[])": FunctionFragment;
    "addStrategy(address,address,address)": FunctionFragment;
    "costPair(address)": FunctionFragment;
    "costToken(address)": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMechanic(address)": FunctionFragment;
    "lastWorkAt(address)": FunctionFragment;
    "mechanicsRegistry()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setMechanicsRegistry(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setV2Keep3r(address)": FunctionFragment;
    "setWorkCooldown(uint256)": FunctionFragment;
    "setYOracle(address)": FunctionFragment;
    "strategies()": FunctionFragment;
    "updateCostTokenAndPair(address,address,address)": FunctionFragment;
    "work(address)": FunctionFragment;
    "workCooldown()": FunctionFragment;
    "workable(address)": FunctionFragment;
    "yOracle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "V2Keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategies",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "costPair", values: [string]): string;
  encodeFunctionData(functionFragment: "costToken", values: [string]): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isMechanic", values: [string]): string;
  encodeFunctionData(functionFragment: "lastWorkAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mechanicsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMechanicsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setV2Keep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWorkCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setYOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCostTokenAndPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(
    functionFragment: "workCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;
  encodeFunctionData(functionFragment: "yOracle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "V2Keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "costPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "costToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMechanic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastWorkAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV2Keep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setYOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCostTokenAndPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yOracle", data: BytesLike): Result;

  events: {
    "DustSent(address,address,uint256)": EventFragment;
    "ForceWorked(address)": EventFragment;
    "GovernorAccepted()": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingGovernorSet(address)": EventFragment;
    "StrategyAdded(address)": EventFragment;
    "StrategyModified(address)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "Worked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingGovernorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type DustSentEvent = TypedEvent<
  [string, string, BigNumber],
  { _to: string; token: string; amount: BigNumber }
>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export type ForceWorkedEvent = TypedEvent<[string], { _strategy: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter =
  TypedEventFilter<GovernorAcceptedEvent>;

export type PausedEvent = TypedEvent<[boolean], { _paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PendingGovernorSetEvent = TypedEvent<
  [string],
  { pendingGovernor: string }
>;

export type PendingGovernorSetEventFilter =
  TypedEventFilter<PendingGovernorSetEvent>;

export type StrategyAddedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export type StrategyModifiedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyModifiedEventFilter =
  TypedEventFilter<StrategyModifiedEvent>;

export type StrategyRemovedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export type WorkedEvent = TypedEvent<
  [string, string],
  { _strategy: string; _keeper: string }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface HarvestV2DetachedGaslessJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HarvestV2DetachedGaslessJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    V2Keeper(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStrategies(
      _strategies: string[],
      _costTokens: string[],
      _costPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStrategy(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    costPair(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    costToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGovernor: boolean }>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isMechanic: boolean }>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mechanicsRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { _mechanicRegistry: string }>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setYOracle(
      _yOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _strategies: string[] }>;

    updateCostTokenAndPair(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<[boolean]>;

    yOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  V2Keeper(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStrategies(
    _strategies: string[],
    _costTokens: string[],
    _costPairs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStrategy(
    _strategy: string,
    _costToken: string,
    _costPair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  costPair(arg0: string, overrides?: CallOverrides): Promise<string>;

  costToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  forceWork(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

  lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  removeStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMechanicsRegistry(
    _mechanicsRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setV2Keep3r(
    _v2Keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkCooldown(
    _workCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setYOracle(
    _yOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  updateCostTokenAndPair(
    _strategy: string,
    _costToken: string,
    _costPair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  work(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

  yOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    V2Keeper(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    addStrategies(
      _strategies: string[],
      _costTokens: string[],
      _costPairs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addStrategy(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    costPair(arg0: string, overrides?: CallOverrides): Promise<string>;

    costToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    forceWork(_strategy: string, overrides?: CallOverrides): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    removeStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setV2Keep3r(_v2Keeper: string, overrides?: CallOverrides): Promise<void>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setYOracle(_yOracle: string, overrides?: CallOverrides): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    updateCostTokenAndPair(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    work(_strategy: string, overrides?: CallOverrides): Promise<void>;

    workCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

    yOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DustSent(address,address,uint256)"(
      _to?: null,
      token?: null,
      amount?: null
    ): DustSentEventFilter;
    DustSent(_to?: null, token?: null, amount?: null): DustSentEventFilter;

    "ForceWorked(address)"(_strategy?: null): ForceWorkedEventFilter;
    ForceWorked(_strategy?: null): ForceWorkedEventFilter;

    "GovernorAccepted()"(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    "Paused(bool)"(_paused?: null): PausedEventFilter;
    Paused(_paused?: null): PausedEventFilter;

    "PendingGovernorSet(address)"(
      pendingGovernor?: null
    ): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;

    "StrategyAdded(address)"(_strategy?: null): StrategyAddedEventFilter;
    StrategyAdded(_strategy?: null): StrategyAddedEventFilter;

    "StrategyModified(address)"(_strategy?: null): StrategyModifiedEventFilter;
    StrategyModified(_strategy?: null): StrategyModifiedEventFilter;

    "StrategyRemoved(address)"(_strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(_strategy?: null): StrategyRemovedEventFilter;

    "Worked(address,address)"(
      _strategy?: null,
      _keeper?: null
    ): WorkedEventFilter;
    Worked(_strategy?: null, _keeper?: null): WorkedEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    V2Keeper(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStrategies(
      _strategies: string[],
      _costTokens: string[],
      _costPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    costPair(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    costToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setYOracle(
      _yOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    updateCostTokenAndPair(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    yOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    V2Keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStrategies(
      _strategies: string[],
      _costTokens: string[],
      _costPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    costPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    costToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastWorkAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setYOracle(
      _yOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCostTokenAndPair(
      _strategy: string,
      _costToken: string,
      _costPair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    workable(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
