/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Basefee, BasefeeInterface } from "../Basefee";

const _abi = [
  {
    inputs: [],
    name: "basefee_global",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "basefee_inline_assembly",
    outputs: [
      {
        internalType: "uint256",
        name: "ret",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639436dce4146037578063d6210d34146037575b600080fd5b4860405190815260200160405180910390f3fea2646970667358221220603e691c569862d44975e64446654eb3f4a825c27df39588e1c3ec62eed255e064736f6c63430008090033";

type BasefeeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasefeeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Basefee__factory extends ContractFactory {
  constructor(...args: BasefeeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Basefee> {
    return super.deploy(overrides || {}) as Promise<Basefee>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Basefee {
    return super.attach(address) as Basefee;
  }
  connect(signer: Signer): Basefee__factory {
    return super.connect(signer) as Basefee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasefeeInterface {
    return new utils.Interface(_abi) as BasefeeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Basefee {
    return new Contract(address, _abi, signerOrProvider) as Basefee;
  }
}
