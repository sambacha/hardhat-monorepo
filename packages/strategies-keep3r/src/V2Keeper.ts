/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface V2KeeperInterface extends utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "addJob(address)": FunctionFragment;
    "addJobs(address[])": FunctionFragment;
    "governor()": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMechanic(address)": FunctionFragment;
    "jobs()": FunctionFragment;
    "mechanicsRegistry()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "removeJob(address)": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setMechanicsRegistry(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "tend(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addJob", values: [string]): string;
  encodeFunctionData(functionFragment: "addJobs", values: [string[]]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isMechanic", values: [string]): string;
  encodeFunctionData(functionFragment: "jobs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mechanicsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeJob", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMechanicsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tend", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addJobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMechanic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;

  events: {
    "DustSent(address,address,uint256)": EventFragment;
    "GovernorAccepted()": EventFragment;
    "JobAdded(address)": EventFragment;
    "JobRemoved(address)": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingGovernorSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingGovernorSet"): EventFragment;
}

export type DustSentEvent = TypedEvent<
  [string, string, BigNumber],
  { _to: string; token: string; amount: BigNumber }
>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter =
  TypedEventFilter<GovernorAcceptedEvent>;

export type JobAddedEvent = TypedEvent<[string], { _job: string }>;

export type JobAddedEventFilter = TypedEventFilter<JobAddedEvent>;

export type JobRemovedEvent = TypedEvent<[string], { _job: string }>;

export type JobRemovedEventFilter = TypedEventFilter<JobRemovedEvent>;

export type PausedEvent = TypedEvent<[boolean], { _paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PendingGovernorSetEvent = TypedEvent<
  [string],
  { pendingGovernor: string }
>;

export type PendingGovernorSetEventFilter =
  TypedEventFilter<PendingGovernorSetEvent>;

export interface V2Keeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V2KeeperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGovernor: boolean }>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isMechanic: boolean }>;

    jobs(overrides?: CallOverrides): Promise<[string[]] & { _jobs: string[] }>;

    mechanicsRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { _mechanicRegistry: string }>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addJobs(
    _jobs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  harvest(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

  jobs(overrides?: CallOverrides): Promise<string[]>;

  mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  removeJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMechanicsRegistry(
    _mechanicsRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tend(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    addJob(_job: string, overrides?: CallOverrides): Promise<void>;

    addJobs(_jobs: string[], overrides?: CallOverrides): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    harvest(_strategy: string, overrides?: CallOverrides): Promise<void>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

    jobs(overrides?: CallOverrides): Promise<string[]>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    removeJob(_job: string, overrides?: CallOverrides): Promise<void>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tend(_strategy: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DustSent(address,address,uint256)"(
      _to?: null,
      token?: null,
      amount?: null
    ): DustSentEventFilter;
    DustSent(_to?: null, token?: null, amount?: null): DustSentEventFilter;

    "GovernorAccepted()"(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    "JobAdded(address)"(_job?: null): JobAddedEventFilter;
    JobAdded(_job?: null): JobAddedEventFilter;

    "JobRemoved(address)"(_job?: null): JobRemovedEventFilter;
    JobRemoved(_job?: null): JobRemovedEventFilter;

    "Paused(bool)"(_paused?: null): PausedEventFilter;
    Paused(_paused?: null): PausedEventFilter;

    "PendingGovernorSet(address)"(
      pendingGovernor?: null
    ): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
