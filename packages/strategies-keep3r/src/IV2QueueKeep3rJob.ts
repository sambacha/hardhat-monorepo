/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IV2QueueKeep3rJobInterface extends utils.Interface {
  functions: {
    "fastGasOracle()": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "forceWorkUnsafe(address)": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setFastGasOracle(address)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "setStrategy(address,address[],uint256[])": FunctionFragment;
    "setV2Keep3r(address)": FunctionFragment;
    "setWorkCooldown(uint256)": FunctionFragment;
    "strategies()": FunctionFragment;
    "strategyQueueList(address)": FunctionFragment;
    "work(address)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fastGasOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "forceWorkUnsafe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFastGasOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setV2Keep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWorkCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyQueueList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "fastGasOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceWorkUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastGasOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV2Keep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyQueueList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "ForceWorked(address)": EventFragment;
    "SetRewardMultiplier(uint256)": EventFragment;
    "StrategyAdded(address)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "Worked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type ForceWorkedEvent = TypedEvent<[string], { _strategy: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type SetRewardMultiplierEvent = TypedEvent<
  [BigNumber],
  { _rewardMultiplier: BigNumber }
>;

export type SetRewardMultiplierEventFilter =
  TypedEventFilter<SetRewardMultiplierEvent>;

export type StrategyAddedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export type StrategyRemovedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export type WorkedEvent = TypedEvent<
  [string, string, BigNumber],
  { _strategy: string; _keeper: string; _credits: BigNumber }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface IV2QueueKeep3rJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IV2QueueKeep3rJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fastGasOracle(
      overrides?: CallOverrides
    ): Promise<[string] & { _fastGasOracle: string }>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardMultiplier: BigNumber }>;

    setFastGasOracle(
      _fastGasOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      _strategy: string,
      _strategies: string[],
      _requiredAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(overrides?: CallOverrides): Promise<[string[]]>;

    strategyQueueList(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _strategies: string[] }>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  fastGasOracle(overrides?: CallOverrides): Promise<string>;

  forceWork(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceWorkUnsafe(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  setFastGasOracle(
    _fastGasOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    _rewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    _strategy: string,
    _strategies: string[],
    _requiredAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setV2Keep3r(
    _v2Keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkCooldown(
    _workCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  strategyQueueList(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  work(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    fastGasOracle(overrides?: CallOverrides): Promise<string>;

    forceWork(_strategy: string, overrides?: CallOverrides): Promise<void>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setFastGasOracle(
      _fastGasOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(
      _strategy: string,
      _strategies: string[],
      _requiredAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setV2Keep3r(_v2Keeper: string, overrides?: CallOverrides): Promise<void>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    strategyQueueList(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    work(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ForceWorked(address)"(_strategy?: null): ForceWorkedEventFilter;
    ForceWorked(_strategy?: null): ForceWorkedEventFilter;

    "SetRewardMultiplier(uint256)"(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;
    SetRewardMultiplier(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;

    "StrategyAdded(address)"(_strategy?: null): StrategyAddedEventFilter;
    StrategyAdded(_strategy?: null): StrategyAddedEventFilter;

    "StrategyRemoved(address)"(_strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(_strategy?: null): StrategyRemovedEventFilter;

    "Worked(address,address,uint256)"(
      _strategy?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
    Worked(
      _strategy?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
  };

  estimateGas: {
    fastGasOracle(overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setFastGasOracle(
      _fastGasOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategy(
      _strategy: string,
      _strategies: string[],
      _requiredAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    strategyQueueList(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fastGasOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFastGasOracle(
      _fastGasOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: string,
      _strategies: string[],
      _requiredAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkCooldown(
      _workCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyQueueList(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
