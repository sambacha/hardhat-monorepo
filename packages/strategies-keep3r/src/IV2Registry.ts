/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IV2RegistryInterface extends utils.Interface {
  functions: {
    "getVault(uint256)": FunctionFragment;
    "getVaultInfo(address)": FunctionFragment;
    "getVaults()": FunctionFragment;
    "getVaultsInfo()": FunctionFragment;
    "isDelegatedVault(address)": FunctionFragment;
    "numTokens()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "vaults(address,uint256)": FunctionFragment;
    "wrappedVaults(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegatedVault",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "numTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedVaults",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegatedVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedVaults",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IV2Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IV2RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getVault(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, boolean] & {
        controller: string;
        token: string;
        strategy: string;
        isWrapped: boolean;
        isDelegated: boolean;
      }
    >;

    getVaults(overrides?: CallOverrides): Promise<[string[]]>;

    getVaultsInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[], boolean[], boolean[]] & {
        controllerArray: string[];
        tokenArray: string[];
        strategyArray: string[];
        isWrappedArray: boolean[];
        isDelegatedArray: boolean[];
      }
    >;

    isDelegatedVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _numTokens: BigNumber }>;

    tokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _token: string }>;

    vaults(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _vault: string }>;

    wrappedVaults(_vault: string, overrides?: CallOverrides): Promise<[string]>;
  };

  getVault(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getVaultInfo(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, boolean] & {
      controller: string;
      token: string;
      strategy: string;
      isWrapped: boolean;
      isDelegated: boolean;
    }
  >;

  getVaults(overrides?: CallOverrides): Promise<string[]>;

  getVaultsInfo(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string[], boolean[], boolean[]] & {
      controllerArray: string[];
      tokenArray: string[];
      strategyArray: string[];
      isWrappedArray: boolean[];
      isDelegatedArray: boolean[];
    }
  >;

  isDelegatedVault(_vault: string, overrides?: CallOverrides): Promise<boolean>;

  numTokens(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaults(
    _token: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  wrappedVaults(_vault: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getVault(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, boolean] & {
        controller: string;
        token: string;
        strategy: string;
        isWrapped: boolean;
        isDelegated: boolean;
      }
    >;

    getVaults(overrides?: CallOverrides): Promise<string[]>;

    getVaultsInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[], boolean[], boolean[]] & {
        controllerArray: string[];
        tokenArray: string[];
        strategyArray: string[];
        isWrappedArray: boolean[];
        isDelegatedArray: boolean[];
      }
    >;

    isDelegatedVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaults(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    wrappedVaults(_vault: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getVault(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultInfo(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVaults(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    isDelegatedVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedVaults(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getVault(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultInfo(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDelegatedVault(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedVaults(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
