/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultsRegistryHelperInterface extends utils.Interface {
  functions: {
    "getVaultStrategies(address)": FunctionFragment;
    "getVaults()": FunctionFragment;
    "getVaultsAndStrategies()": FunctionFragment;
    "registry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getVaultStrategies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultsAndStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getVaultStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsAndStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {};
}

export interface IVaultsRegistryHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultsRegistryHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getVaultStrategies(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _strategies: string[] }>;

    getVaults(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _vaults: string[] }>;

    getVaultsAndStrategies(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { _vaults: string[]; _strategies: string[] }
    >;

    registry(
      overrides?: CallOverrides
    ): Promise<[string] & { _registry: string }>;
  };

  getVaultStrategies(
    _vault: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVaults(overrides?: CallOverrides): Promise<string[]>;

  getVaultsAndStrategies(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { _vaults: string[]; _strategies: string[] }
  >;

  registry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getVaultStrategies(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVaults(overrides?: CallOverrides): Promise<string[]>;

    getVaultsAndStrategies(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { _vaults: string[]; _strategies: string[] }
    >;

    registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getVaultStrategies(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaults(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsAndStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getVaultStrategies(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsAndStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
