/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CrvStrategyKeep3rStealthJob2Interface extends utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "MAX_REWARD_MULTIPLIER()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "addStrategies(address[],uint256[],uint256[])": FunctionFragment;
    "addStrategy(address,uint256,uint256)": FunctionFragment;
    "age()": FunctionFragment;
    "bond()": FunctionFragment;
    "calculateHarvest(address)": FunctionFragment;
    "earned()": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "forceWorkUnsafe(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "harvestCooldown()": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMechanic(address)": FunctionFragment;
    "keep3r()": FunctionFragment;
    "lastHarvest()": FunctionFragment;
    "lastWorkAt(address)": FunctionFragment;
    "maxHarvestPeriod()": FunctionFragment;
    "mechanicsRegistry()": FunctionFragment;
    "minBond()": FunctionFragment;
    "onlyEOA()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "requiredEarn(address)": FunctionFragment;
    "requiredHarvest(address)": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setHarvestCooldown(uint256)": FunctionFragment;
    "setKeep3r(address)": FunctionFragment;
    "setKeep3rRequirements(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "setMaxHarvestPeriod(uint256)": FunctionFragment;
    "setMechanicsRegistry(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "setStealthRelayer(address)": FunctionFragment;
    "setV2Keep3r(address)": FunctionFragment;
    "stealthRelayer()": FunctionFragment;
    "strategies()": FunctionFragment;
    "strategyIsV1(address)": FunctionFragment;
    "updateStrategies(address[],uint256[],uint256[])": FunctionFragment;
    "updateStrategy(address,uint256,uint256)": FunctionFragment;
    "v2Keeper()": FunctionFragment;
    "work(address)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategies",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "age", values?: undefined): string;
  encodeFunctionData(functionFragment: "bond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateHarvest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "earned", values?: undefined): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "forceWorkUnsafe",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isMechanic", values: [string]): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastWorkAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxHarvestPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mechanicsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minBond", values?: undefined): string;
  encodeFunctionData(functionFragment: "onlyEOA", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredEarn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredHarvest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setKeep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeep3rRequirements",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxHarvestPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMechanicsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStealthRelayer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setV2Keep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stealthRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyIsV1",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategies",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "v2Keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "age", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceWorkUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMechanic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastWorkAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxHarvestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onlyEOA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxHarvestPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMechanicsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStealthRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV2Keep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealthRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyIsV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "v2Keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "DustSent(address,address,uint256)": EventFragment;
    "ForceWorked(address)": EventFragment;
    "GovernorAccepted()": EventFragment;
    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)": EventFragment;
    "Keep3rSet(address)": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingGovernorSet(address)": EventFragment;
    "SetRewardMultiplier(uint256)": EventFragment;
    "StealthRelayerSet(address)": EventFragment;
    "StrategyAdded(address,uint256,uint256)": EventFragment;
    "StrategyModified(address,uint256,uint256)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "Worked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rRequirementsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingGovernorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthRelayerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type DustSentEvent = TypedEvent<
  [string, string, BigNumber],
  { _to: string; token: string; amount: BigNumber }
>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export type ForceWorkedEvent = TypedEvent<[string], { _strategy: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter =
  TypedEventFilter<GovernorAcceptedEvent>;

export type Keep3rRequirementsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  {
    _bond: string;
    _minBond: BigNumber;
    _earned: BigNumber;
    _age: BigNumber;
    _onlyEOA: boolean;
  }
>;

export type Keep3rRequirementsSetEventFilter =
  TypedEventFilter<Keep3rRequirementsSetEvent>;

export type Keep3rSetEvent = TypedEvent<[string], { _keep3r: string }>;

export type Keep3rSetEventFilter = TypedEventFilter<Keep3rSetEvent>;

export type PausedEvent = TypedEvent<[boolean], { _paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PendingGovernorSetEvent = TypedEvent<
  [string],
  { pendingGovernor: string }
>;

export type PendingGovernorSetEventFilter =
  TypedEventFilter<PendingGovernorSetEvent>;

export type SetRewardMultiplierEvent = TypedEvent<
  [BigNumber],
  { _rewardMultiplier: BigNumber }
>;

export type SetRewardMultiplierEventFilter =
  TypedEventFilter<SetRewardMultiplierEvent>;

export type StealthRelayerSetEvent = TypedEvent<
  [string],
  { _stealthRelayer: string }
>;

export type StealthRelayerSetEventFilter =
  TypedEventFilter<StealthRelayerSetEvent>;

export type StrategyAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _strategy: string; _requiredHarvest: BigNumber; _requiredEarn: BigNumber }
>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export type StrategyModifiedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _strategy: string; _requiredHarvest: BigNumber; _requiredEarn: BigNumber }
>;

export type StrategyModifiedEventFilter =
  TypedEventFilter<StrategyModifiedEvent>;

export type StrategyRemovedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export type WorkedEvent = TypedEvent<
  [string, string, BigNumber],
  { _strategy: string; _keeper: string; _credits: BigNumber }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface CrvStrategyKeep3rStealthJob2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrvStrategyKeep3rStealthJob2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    age(overrides?: CallOverrides): Promise<[BigNumber]>;

    bond(overrides?: CallOverrides): Promise<[string]>;

    calculateHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    harvestCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGovernor: boolean }>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isMechanic: boolean }>;

    keep3r(overrides?: CallOverrides): Promise<[string] & { _keep3r: string }>;

    lastHarvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxHarvestPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    mechanicsRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { _mechanicRegistry: string }>;

    minBond(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyEOA(overrides?: CallOverrides): Promise<[boolean]>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestCooldown(
      _harvestCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxHarvestPeriod(
      _maxHarvestPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stealthRelayer(overrides?: CallOverrides): Promise<[string]>;

    strategies(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _strategies: string[] }>;

    strategyIsV1(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    updateStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    v2Keeper(overrides?: CallOverrides): Promise<[string]>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStrategies(
    _strategies: string[],
    _requiredHarvests: BigNumberish[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStrategy(
    _strategy: string,
    _requiredHarvest: BigNumberish,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  age(overrides?: CallOverrides): Promise<BigNumber>;

  bond(overrides?: CallOverrides): Promise<string>;

  calculateHarvest(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(overrides?: CallOverrides): Promise<BigNumber>;

  forceWork(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceWorkUnsafe(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  harvestCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxHarvestPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

  minBond(overrides?: CallOverrides): Promise<BigNumber>;

  onlyEOA(overrides?: CallOverrides): Promise<boolean>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  removeStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  requiredHarvest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestCooldown(
    _harvestCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3r(
    _keep3r: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rRequirements(
    _bond: string,
    _minBond: BigNumberish,
    _earned: BigNumberish,
    _age: BigNumberish,
    _onlyEOA: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxHarvestPeriod(
    _maxHarvestPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMechanicsRegistry(
    _mechanicsRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    _rewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStealthRelayer(
    _stealthRelayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setV2Keep3r(
    _v2Keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stealthRelayer(overrides?: CallOverrides): Promise<string>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  strategyIsV1(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  updateStrategies(
    _strategies: string[],
    _requiredHarvests: BigNumberish[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStrategy(
    _strategy: string,
    _requiredHarvest: BigNumberish,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  v2Keeper(overrides?: CallOverrides): Promise<string>;

  work(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    addStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<string>;

    calculateHarvest(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(_strategy: string, overrides?: CallOverrides): Promise<void>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    harvestCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isMechanic(_mechanic: string, overrides?: CallOverrides): Promise<boolean>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxHarvestPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<string>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<boolean>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    removeStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestCooldown(
      _harvestCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3r(_keep3r: string, overrides?: CallOverrides): Promise<void>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxHarvestPeriod(
      _maxHarvestPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setV2Keep3r(_v2Keeper: string, overrides?: CallOverrides): Promise<void>;

    stealthRelayer(overrides?: CallOverrides): Promise<string>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    strategyIsV1(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    updateStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    v2Keeper(overrides?: CallOverrides): Promise<string>;

    work(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "DustSent(address,address,uint256)"(
      _to?: null,
      token?: null,
      amount?: null
    ): DustSentEventFilter;
    DustSent(_to?: null, token?: null, amount?: null): DustSentEventFilter;

    "ForceWorked(address)"(_strategy?: null): ForceWorkedEventFilter;
    ForceWorked(_strategy?: null): ForceWorkedEventFilter;

    "GovernorAccepted()"(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)"(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;
    Keep3rRequirementsSet(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;

    "Keep3rSet(address)"(_keep3r?: null): Keep3rSetEventFilter;
    Keep3rSet(_keep3r?: null): Keep3rSetEventFilter;

    "Paused(bool)"(_paused?: null): PausedEventFilter;
    Paused(_paused?: null): PausedEventFilter;

    "PendingGovernorSet(address)"(
      pendingGovernor?: null
    ): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;

    "SetRewardMultiplier(uint256)"(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;
    SetRewardMultiplier(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;

    "StealthRelayerSet(address)"(
      _stealthRelayer?: null
    ): StealthRelayerSetEventFilter;
    StealthRelayerSet(_stealthRelayer?: null): StealthRelayerSetEventFilter;

    "StrategyAdded(address,uint256,uint256)"(
      _strategy?: null,
      _requiredHarvest?: null,
      _requiredEarn?: null
    ): StrategyAddedEventFilter;
    StrategyAdded(
      _strategy?: null,
      _requiredHarvest?: null,
      _requiredEarn?: null
    ): StrategyAddedEventFilter;

    "StrategyModified(address,uint256,uint256)"(
      _strategy?: null,
      _requiredHarvest?: null,
      _requiredEarn?: null
    ): StrategyModifiedEventFilter;
    StrategyModified(
      _strategy?: null,
      _requiredHarvest?: null,
      _requiredEarn?: null
    ): StrategyModifiedEventFilter;

    "StrategyRemoved(address)"(_strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(_strategy?: null): StrategyRemovedEventFilter;

    "Worked(address,address,uint256)"(
      _strategy?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
    Worked(
      _strategy?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    harvestCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lastWorkAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxHarvestPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredEarn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestCooldown(
      _harvestCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxHarvestPeriod(
      _maxHarvestPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stealthRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    strategyIsV1(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    v2Keeper(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REWARD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    age(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceWork(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMechanic(
      _mechanic: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWorkAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxHarvestPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mechanicsRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyEOA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredEarn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestCooldown(
      _harvestCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxHarvestPeriod(
      _maxHarvestPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMechanicsRegistry(
      _mechanicsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stealthRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyIsV1(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateStrategies(
      _strategies: string[],
      _requiredHarvests: BigNumberish[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    v2Keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
