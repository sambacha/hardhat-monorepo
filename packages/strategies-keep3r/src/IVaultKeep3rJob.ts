/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultKeep3rJobInterface extends utils.Interface {
  functions: {
    "addVault(address,uint256)": FunctionFragment;
    "addVaults(address[],uint256[])": FunctionFragment;
    "calculateEarn(address)": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "removeVault(address)": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setEarnCooldown(uint256)": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "updateVault(address,uint256)": FunctionFragment;
    "updateVaults(address[],uint256[])": FunctionFragment;
    "vaults()": FunctionFragment;
    "work(address)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaults",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEarn",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(functionFragment: "removeVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEarnCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaults",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values?: undefined): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarnCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "ForceWorked(address)": EventFragment;
    "SetRewardMultiplier(uint256)": EventFragment;
    "VaultAdded(address,uint256)": EventFragment;
    "VaultModified(address,uint256)": EventFragment;
    "VaultRemoved(address)": EventFragment;
    "Worked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type ForceWorkedEvent = TypedEvent<[string], { _vault: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type SetRewardMultiplierEvent = TypedEvent<
  [BigNumber],
  { _rewardMultiplier: BigNumber }
>;

export type SetRewardMultiplierEventFilter =
  TypedEventFilter<SetRewardMultiplierEvent>;

export type VaultAddedEvent = TypedEvent<
  [string, BigNumber],
  { _vault: string; _requiredEarn: BigNumber }
>;

export type VaultAddedEventFilter = TypedEventFilter<VaultAddedEvent>;

export type VaultModifiedEvent = TypedEvent<
  [string, BigNumber],
  { _vault: string; _requiredEarn: BigNumber }
>;

export type VaultModifiedEventFilter = TypedEventFilter<VaultModifiedEvent>;

export type VaultRemovedEvent = TypedEvent<[string], { _vault: string }>;

export type VaultRemovedEventFilter = TypedEventFilter<VaultRemovedEvent>;

export type WorkedEvent = TypedEvent<
  [string, string, BigNumber],
  { _vault: string; _keeper: string; _credits: BigNumber }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface IVaultKeep3rJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultKeep3rJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardMultiplier: BigNumber }>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _vaults: string[] }>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addVault(
    _vault: string,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaults(
    _vaults: string[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateEarn(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

  forceWork(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVault(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  setEarnCooldown(
    _earnCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardMultiplier(
    _rewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: string,
    _requiredEarn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVaults(
    _vaults: string[],
    _requiredEarns: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(overrides?: CallOverrides): Promise<string[]>;

  work(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceWork(_vault: string, overrides?: CallOverrides): Promise<void>;

    removeVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(overrides?: CallOverrides): Promise<string[]>;

    work(_vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    workable(_vault: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ForceWorked(address)"(_vault?: null): ForceWorkedEventFilter;
    ForceWorked(_vault?: null): ForceWorkedEventFilter;

    "SetRewardMultiplier(uint256)"(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;
    SetRewardMultiplier(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;

    "VaultAdded(address,uint256)"(
      _vault?: null,
      _requiredEarn?: null
    ): VaultAddedEventFilter;
    VaultAdded(_vault?: null, _requiredEarn?: null): VaultAddedEventFilter;

    "VaultModified(address,uint256)"(
      _vault?: null,
      _requiredEarn?: null
    ): VaultModifiedEventFilter;
    VaultModified(
      _vault?: null,
      _requiredEarn?: null
    ): VaultModifiedEventFilter;

    "VaultRemoved(address)"(_vault?: null): VaultRemovedEventFilter;
    VaultRemoved(_vault?: null): VaultRemovedEventFilter;

    "Worked(address,address,uint256)"(
      _vault?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
    Worked(_vault?: null, _keeper?: null, _credits?: null): WorkedEventFilter;
  };

  estimateGas: {
    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateEarn(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceWork(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEarnCooldown(
      _earnCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: string,
      _requiredEarn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVaults(
      _vaults: string[],
      _requiredEarns: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
