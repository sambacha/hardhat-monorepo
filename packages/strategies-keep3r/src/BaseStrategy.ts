/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BaseStrategyInterface extends utils.Interface {
  functions: {
    "apiVersion()": FunctionFragment;
    "debtThreshold()": FunctionFragment;
    "delegatedAssets()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestTrigger(uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "keeper()": FunctionFragment;
    "maxReportDelay()": FunctionFragment;
    "metadataURI()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "minReportDelay()": FunctionFragment;
    "name()": FunctionFragment;
    "profitFactor()": FunctionFragment;
    "rewards()": FunctionFragment;
    "setDebtThreshold(uint256)": FunctionFragment;
    "setEmergencyExit()": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setMaxReportDelay(uint256)": FunctionFragment;
    "setMetadataURI(string)": FunctionFragment;
    "setMinReportDelay(uint256)": FunctionFragment;
    "setProfitFactor(uint256)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "strategist()": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "tend()": FunctionFragment;
    "tendTrigger(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "apiVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profitFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDebtThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxReportDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReportDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(functionFragment: "tend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tendTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "apiVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tendTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EmergencyExitEnabled()": EventFragment;
    "Harvested(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdatedDebtThreshold(uint256)": EventFragment;
    "UpdatedKeeper(address)": EventFragment;
    "UpdatedMaxReportDelay(uint256)": EventFragment;
    "UpdatedMetadataURI(string)": EventFragment;
    "UpdatedMinReportDelay(uint256)": EventFragment;
    "UpdatedProfitFactor(uint256)": EventFragment;
    "UpdatedRewards(address)": EventFragment;
    "UpdatedStrategist(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyExitEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedDebtThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMetadataURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedProfitFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedStrategist"): EventFragment;
}

export type EmergencyExitEnabledEvent = TypedEvent<[], {}>;

export type EmergencyExitEnabledEventFilter =
  TypedEventFilter<EmergencyExitEnabledEvent>;

export type HarvestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    profit: BigNumber;
    loss: BigNumber;
    debtPayment: BigNumber;
    debtOutstanding: BigNumber;
  }
>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export type UpdatedDebtThresholdEvent = TypedEvent<
  [BigNumber],
  { debtThreshold: BigNumber }
>;

export type UpdatedDebtThresholdEventFilter =
  TypedEventFilter<UpdatedDebtThresholdEvent>;

export type UpdatedKeeperEvent = TypedEvent<[string], { newKeeper: string }>;

export type UpdatedKeeperEventFilter = TypedEventFilter<UpdatedKeeperEvent>;

export type UpdatedMaxReportDelayEvent = TypedEvent<
  [BigNumber],
  { delay: BigNumber }
>;

export type UpdatedMaxReportDelayEventFilter =
  TypedEventFilter<UpdatedMaxReportDelayEvent>;

export type UpdatedMetadataURIEvent = TypedEvent<
  [string],
  { metadataURI: string }
>;

export type UpdatedMetadataURIEventFilter =
  TypedEventFilter<UpdatedMetadataURIEvent>;

export type UpdatedMinReportDelayEvent = TypedEvent<
  [BigNumber],
  { delay: BigNumber }
>;

export type UpdatedMinReportDelayEventFilter =
  TypedEventFilter<UpdatedMinReportDelayEvent>;

export type UpdatedProfitFactorEvent = TypedEvent<
  [BigNumber],
  { profitFactor: BigNumber }
>;

export type UpdatedProfitFactorEventFilter =
  TypedEventFilter<UpdatedProfitFactorEvent>;

export type UpdatedRewardsEvent = TypedEvent<[string], { rewards: string }>;

export type UpdatedRewardsEventFilter = TypedEventFilter<UpdatedRewardsEvent>;

export type UpdatedStrategistEvent = TypedEvent<
  [string],
  { newStrategist: string }
>;

export type UpdatedStrategistEventFilter =
  TypedEventFilter<UpdatedStrategistEvent>;

export interface BaseStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    apiVersion(overrides?: CallOverrides): Promise<[string]>;

    debtThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegatedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExit(overrides?: CallOverrides): Promise<[boolean]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    maxReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    metadataURI(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    profitFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  apiVersion(overrides?: CallOverrides): Promise<string>;

  debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExit(overrides?: CallOverrides): Promise<boolean>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestTrigger(
    callCost: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  metadataURI(overrides?: CallOverrides): Promise<string>;

  migrate(
    _newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setDebtThreshold(
    _debtThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxReportDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetadataURI(
    _metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReportDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfitFactor(
    _profitFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  sweep(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tendTrigger(
    callCost: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amountNeeded: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    apiVersion(overrides?: CallOverrides): Promise<string>;

    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<boolean>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    metadataURI(overrides?: CallOverrides): Promise<string>;

    migrate(_newStrategy: string, overrides?: CallOverrides): Promise<void>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExit(overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataURI(
      _metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    sweep(_token: string, overrides?: CallOverrides): Promise<void>;

    tend(overrides?: CallOverrides): Promise<void>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EmergencyExitEnabled()"(): EmergencyExitEnabledEventFilter;
    EmergencyExitEnabled(): EmergencyExitEnabledEventFilter;

    "Harvested(uint256,uint256,uint256,uint256)"(
      profit?: null,
      loss?: null,
      debtPayment?: null,
      debtOutstanding?: null
    ): HarvestedEventFilter;
    Harvested(
      profit?: null,
      loss?: null,
      debtPayment?: null,
      debtOutstanding?: null
    ): HarvestedEventFilter;

    "UpdatedDebtThreshold(uint256)"(
      debtThreshold?: null
    ): UpdatedDebtThresholdEventFilter;
    UpdatedDebtThreshold(debtThreshold?: null): UpdatedDebtThresholdEventFilter;

    "UpdatedKeeper(address)"(newKeeper?: null): UpdatedKeeperEventFilter;
    UpdatedKeeper(newKeeper?: null): UpdatedKeeperEventFilter;

    "UpdatedMaxReportDelay(uint256)"(
      delay?: null
    ): UpdatedMaxReportDelayEventFilter;
    UpdatedMaxReportDelay(delay?: null): UpdatedMaxReportDelayEventFilter;

    "UpdatedMetadataURI(string)"(
      metadataURI?: null
    ): UpdatedMetadataURIEventFilter;
    UpdatedMetadataURI(metadataURI?: null): UpdatedMetadataURIEventFilter;

    "UpdatedMinReportDelay(uint256)"(
      delay?: null
    ): UpdatedMinReportDelayEventFilter;
    UpdatedMinReportDelay(delay?: null): UpdatedMinReportDelayEventFilter;

    "UpdatedProfitFactor(uint256)"(
      profitFactor?: null
    ): UpdatedProfitFactorEventFilter;
    UpdatedProfitFactor(profitFactor?: null): UpdatedProfitFactorEventFilter;

    "UpdatedRewards(address)"(rewards?: null): UpdatedRewardsEventFilter;
    UpdatedRewards(rewards?: null): UpdatedRewardsEventFilter;

    "UpdatedStrategist(address)"(
      newStrategist?: null
    ): UpdatedStrategistEventFilter;
    UpdatedStrategist(newStrategist?: null): UpdatedStrategistEventFilter;
  };

  estimateGas: {
    apiVersion(overrides?: CallOverrides): Promise<BigNumber>;

    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    metadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    apiVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
