/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ManageableInterface extends utils.Interface {
  functions: {
    "acceptManager()": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "manager()": FunctionFragment;
    "pendingManager()": FunctionFragment;
    "setPendingManager(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingManager",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingManager",
    data: BytesLike
  ): Result;

  events: {
    "ManagerAccepted()": EventFragment;
    "PendingManagerSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ManagerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingManagerSet"): EventFragment;
}

export type ManagerAcceptedEvent = TypedEvent<[], {}>;

export type ManagerAcceptedEventFilter = TypedEventFilter<ManagerAcceptedEvent>;

export type PendingManagerSetEvent = TypedEvent<
  [string],
  { pendingManager: string }
>;

export type PendingManagerSetEventFilter =
  TypedEventFilter<PendingManagerSetEvent>;

export interface Manageable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManageableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isManager: boolean }>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    pendingManager(overrides?: CallOverrides): Promise<[string]>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  pendingManager(overrides?: CallOverrides): Promise<string>;

  setPendingManager(
    _pendingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptManager(overrides?: CallOverrides): Promise<void>;

    isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    pendingManager(overrides?: CallOverrides): Promise<string>;

    setPendingManager(
      _pendingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ManagerAccepted()"(): ManagerAcceptedEventFilter;
    ManagerAccepted(): ManagerAcceptedEventFilter;

    "PendingManagerSet(address)"(
      pendingManager?: null
    ): PendingManagerSetEventFilter;
    PendingManagerSet(pendingManager?: null): PendingManagerSetEventFilter;
  };

  estimateGas: {
    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isManager(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    pendingManager(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
