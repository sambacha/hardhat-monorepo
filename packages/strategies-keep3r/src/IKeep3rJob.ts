/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IKeep3rJobInterface extends utils.Interface {
  functions: {
    "getWorkData()": FunctionFragment;
    "keep3r()": FunctionFragment;
    "keep3rProxyJob()": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "work(bytes)": FunctionFragment;
    "workable()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getWorkData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rProxyJob",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "work", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "workable", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getWorkData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rProxyJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {};
}

export interface IKeep3rJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeep3rJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getWorkData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keep3r(overrides?: CallOverrides): Promise<[string] & { _keep3r: string }>;

    keep3rProxyJob(
      overrides?: CallOverrides
    ): Promise<[string] & { _keep3rProxyJob: string }>;

    maxGasPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxGasPrice: BigNumber }>;

    work(
      _workData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getWorkData(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  keep3rProxyJob(overrides?: CallOverrides): Promise<string>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  work(
    _workData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getWorkData(overrides?: CallOverrides): Promise<string>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    keep3rProxyJob(overrides?: CallOverrides): Promise<string>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    work(_workData: BytesLike, overrides?: CallOverrides): Promise<void>;

    workable(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getWorkData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rProxyJob(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      _workData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWorkData(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rProxyJob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      _workData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
