/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IKeep3rEscrowJobInterface extends utils.Interface {
  functions: {
    "acceptGovernorOnEscrow(address)": FunctionFragment;
    "addLiquidityToJob(address)": FunctionFragment;
    "applyCreditToJob(address)": FunctionFragment;
    "forceWork()": FunctionFragment;
    "getNextAction()": FunctionFragment;
    "removeLiquidityFromJob(address)": FunctionFragment;
    "returnLPsToGovernance(address)": FunctionFragment;
    "sendDustOnEscrow(address,address,address,uint256)": FunctionFragment;
    "setPendingGovernorOnEscrow(address,address)": FunctionFragment;
    "unbondLiquidityFromJob(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernorOnEscrow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityToJob",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "applyCreditToJob",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "forceWork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNextAction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityFromJob",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnLPsToGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendDustOnEscrow",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernorOnEscrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondLiquidityFromJob",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernorOnEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyCreditToJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityFromJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLPsToGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendDustOnEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernorOnEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondLiquidityFromJob",
    data: BytesLike
  ): Result;

  events: {
    "ForceWorked()": EventFragment;
    "Worked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type ForceWorkedEvent = TypedEvent<[], {}>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type WorkedEvent = TypedEvent<[], {}>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface IKeep3rEscrowJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeep3rEscrowJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernorOnEscrow(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyCreditToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNextAction(
      overrides?: CallOverrides
    ): Promise<[string, number] & { Escrow: string; _action: number }>;

    removeLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnLPsToGovernance(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendDustOnEscrow(
      _escrow: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernorOnEscrow(
      _escrow: string,
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbondLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernorOnEscrow(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityToJob(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyCreditToJob(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceWork(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNextAction(
    overrides?: CallOverrides
  ): Promise<[string, number] & { Escrow: string; _action: number }>;

  removeLiquidityFromJob(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnLPsToGovernance(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendDustOnEscrow(
    _escrow: string,
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernorOnEscrow(
    _escrow: string,
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbondLiquidityFromJob(
    _escrow: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernorOnEscrow(
      _escrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityToJob(
      _escrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    applyCreditToJob(_escrow: string, overrides?: CallOverrides): Promise<void>;

    forceWork(overrides?: CallOverrides): Promise<void>;

    getNextAction(
      overrides?: CallOverrides
    ): Promise<[string, number] & { Escrow: string; _action: number }>;

    removeLiquidityFromJob(
      _escrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    returnLPsToGovernance(
      _escrow: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendDustOnEscrow(
      _escrow: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernorOnEscrow(
      _escrow: string,
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondLiquidityFromJob(
      _escrow: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ForceWorked()"(): ForceWorkedEventFilter;
    ForceWorked(): ForceWorkedEventFilter;

    "Worked()"(): WorkedEventFilter;
    Worked(): WorkedEventFilter;
  };

  estimateGas: {
    acceptGovernorOnEscrow(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyCreditToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNextAction(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnLPsToGovernance(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendDustOnEscrow(
      _escrow: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernorOnEscrow(
      _escrow: string,
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernorOnEscrow(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyCreditToJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNextAction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnLPsToGovernance(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendDustOnEscrow(
      _escrow: string,
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernorOnEscrow(
      _escrow: string,
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbondLiquidityFromJob(
      _escrow: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
