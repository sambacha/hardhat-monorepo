/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPartialKeep3rV1OracleJobInterface extends utils.Interface {
  functions: {
    "addPair(address)": FunctionFragment;
    "addPairs(address[])": FunctionFragment;
    "forceWork(address)": FunctionFragment;
    "oracleBondedKeeper()": FunctionFragment;
    "pairs()": FunctionFragment;
    "removePair(address)": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setRewardMultiplier(uint256)": FunctionFragment;
    "work(address)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPair", values: [string]): string;
  encodeFunctionData(functionFragment: "addPairs", values: [string[]]): string;
  encodeFunctionData(functionFragment: "forceWork", values: [string]): string;
  encodeFunctionData(
    functionFragment: "oracleBondedKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "removePair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "work", values: [string]): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forceWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleBondedKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "ForceWorked(address)": EventFragment;
    "PairAdded(address)": EventFragment;
    "PairRemoved(address)": EventFragment;
    "SetRewardMultiplier(uint256)": EventFragment;
    "Worked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceWorked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Worked"): EventFragment;
}

export type ForceWorkedEvent = TypedEvent<[string], { _pair: string }>;

export type ForceWorkedEventFilter = TypedEventFilter<ForceWorkedEvent>;

export type PairAddedEvent = TypedEvent<[string], { _pair: string }>;

export type PairAddedEventFilter = TypedEventFilter<PairAddedEvent>;

export type PairRemovedEvent = TypedEvent<[string], { _pair: string }>;

export type PairRemovedEventFilter = TypedEventFilter<PairRemovedEvent>;

export type SetRewardMultiplierEvent = TypedEvent<
  [BigNumber],
  { _rewardMultiplier: BigNumber }
>;

export type SetRewardMultiplierEventFilter =
  TypedEventFilter<SetRewardMultiplierEvent>;

export type WorkedEvent = TypedEvent<
  [string, string, BigNumber],
  { _pair: string; _keeper: string; _credits: BigNumber }
>;

export type WorkedEventFilter = TypedEventFilter<WorkedEvent>;

export interface IPartialKeep3rV1OracleJob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPartialKeep3rV1OracleJobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPairs(
      _pairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceWork(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleBondedKeeper(
      overrides?: CallOverrides
    ): Promise<[string] & { _oracleBondedKeeper: string }>;

    pairs(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _pairs: string[] }>;

    removePair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardMultiplier: BigNumber }>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    work(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(_pair: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addPair(
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPairs(
    _pairs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceWork(
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleBondedKeeper(overrides?: CallOverrides): Promise<string>;

  pairs(overrides?: CallOverrides): Promise<string[]>;

  removePair(
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardMultiplier(
    _rewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  work(
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(_pair: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addPair(_pair: string, overrides?: CallOverrides): Promise<void>;

    addPairs(_pairs: string[], overrides?: CallOverrides): Promise<void>;

    forceWork(_pair: string, overrides?: CallOverrides): Promise<void>;

    oracleBondedKeeper(overrides?: CallOverrides): Promise<string>;

    pairs(overrides?: CallOverrides): Promise<string[]>;

    removePair(_pair: string, overrides?: CallOverrides): Promise<void>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    work(_pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    workable(_pair: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ForceWorked(address)"(_pair?: null): ForceWorkedEventFilter;
    ForceWorked(_pair?: null): ForceWorkedEventFilter;

    "PairAdded(address)"(_pair?: null): PairAddedEventFilter;
    PairAdded(_pair?: null): PairAddedEventFilter;

    "PairRemoved(address)"(_pair?: null): PairRemovedEventFilter;
    PairRemoved(_pair?: null): PairRemovedEventFilter;

    "SetRewardMultiplier(uint256)"(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;
    SetRewardMultiplier(
      _rewardMultiplier?: null
    ): SetRewardMultiplierEventFilter;

    "Worked(address,address,uint256)"(
      _pair?: null,
      _keeper?: null,
      _credits?: null
    ): WorkedEventFilter;
    Worked(_pair?: null, _keeper?: null, _credits?: null): WorkedEventFilter;
  };

  estimateGas: {
    addPair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPairs(
      _pairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceWork(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleBondedKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(overrides?: CallOverrides): Promise<BigNumber>;

    removePair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    work(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(_pair: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPairs(
      _pairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceWork(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleBondedKeeper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePair(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardMultiplier(
      _rewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    work(
      _pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
