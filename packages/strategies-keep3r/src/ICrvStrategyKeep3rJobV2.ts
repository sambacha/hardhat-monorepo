/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICrvStrategyKeep3rJobV2Interface extends utils.Interface {
  functions: {
    "forceWorkUnsafe(address)": FunctionFragment;
    "setV2Keep3r(address)": FunctionFragment;
    "strategyIsV1(address)": FunctionFragment;
    "v2Keeper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "forceWorkUnsafe",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setV2Keep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategyIsV1",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "v2Keeper", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "forceWorkUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV2Keep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyIsV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "v2Keeper", data: BytesLike): Result;

  events: {};
}

export interface ICrvStrategyKeep3rJobV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrvStrategyKeep3rJobV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyIsV1(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    v2Keeper(
      overrides?: CallOverrides
    ): Promise<[string] & { _v2Keeper: string }>;
  };

  forceWorkUnsafe(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setV2Keep3r(
    _v2Keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyIsV1(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

  v2Keeper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    forceWorkUnsafe(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setV2Keep3r(_v2Keeper: string, overrides?: CallOverrides): Promise<void>;

    strategyIsV1(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    v2Keeper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyIsV1(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    v2Keeper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    forceWorkUnsafe(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setV2Keep3r(
      _v2Keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyIsV1(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    v2Keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
