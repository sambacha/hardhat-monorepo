/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IV2KeeperInterface extends utils.Interface {
  functions: {
    "addJob(address)": FunctionFragment;
    "addJobs(address[])": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "jobs()": FunctionFragment;
    "removeJob(address)": FunctionFragment;
    "tend(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addJob", values: [string]): string;
  encodeFunctionData(functionFragment: "addJobs", values: [string[]]): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(functionFragment: "jobs", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeJob", values: [string]): string;
  encodeFunctionData(functionFragment: "tend", values: [string]): string;

  decodeFunctionResult(functionFragment: "addJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addJobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;

  events: {
    "JobAdded(address)": EventFragment;
    "JobRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JobAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobRemoved"): EventFragment;
}

export type JobAddedEvent = TypedEvent<[string], { _job: string }>;

export type JobAddedEventFilter = TypedEventFilter<JobAddedEvent>;

export type JobRemovedEvent = TypedEvent<[string], { _job: string }>;

export type JobRemovedEventFilter = TypedEventFilter<JobRemovedEvent>;

export interface IV2Keeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IV2KeeperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobs(overrides?: CallOverrides): Promise<[string[]]>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addJobs(
    _jobs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobs(overrides?: CallOverrides): Promise<string[]>;

  removeJob(
    _job: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tend(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addJob(_job: string, overrides?: CallOverrides): Promise<void>;

    addJobs(_jobs: string[], overrides?: CallOverrides): Promise<void>;

    harvest(_strategy: string, overrides?: CallOverrides): Promise<void>;

    jobs(overrides?: CallOverrides): Promise<string[]>;

    removeJob(_job: string, overrides?: CallOverrides): Promise<void>;

    tend(_strategy: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "JobAdded(address)"(_job?: null): JobAddedEventFilter;
    JobAdded(_job?: null): JobAddedEventFilter;

    "JobRemoved(address)"(_job?: null): JobRemovedEventFilter;
    JobRemoved(_job?: null): JobRemovedEventFilter;
  };

  estimateGas: {
    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<BigNumber>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addJobs(
      _jobs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeJob(
      _job: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tend(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
