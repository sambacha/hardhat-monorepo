/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDforceStrategyKeep3rInterface extends utils.Interface {
  functions: {
    "addStrategy(address,uint256)": FunctionFragment;
    "age()": FunctionFragment;
    "bond()": FunctionFragment;
    "calculateHarvest(address)": FunctionFragment;
    "earned()": FunctionFragment;
    "forceHarvest(address)": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "isDforceStrategyKeep3r()": FunctionFragment;
    "keep3r()": FunctionFragment;
    "minBond()": FunctionFragment;
    "onlyEOA()": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "setKeep3r(address)": FunctionFragment;
    "setKeep3rRequirements(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "strategies()": FunctionFragment;
    "updateRequiredHarvestAmount(address,uint256)": FunctionFragment;
    "workable(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "age", values?: undefined): string;
  encodeFunctionData(functionFragment: "bond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateHarvest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "earned", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceHarvest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDforceStrategyKeep3r",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(functionFragment: "minBond", values?: undefined): string;
  encodeFunctionData(functionFragment: "onlyEOA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKeep3r", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeep3rRequirements",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequiredHarvestAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "workable", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "age", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDforceStrategyKeep3r",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onlyEOA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKeep3rRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRequiredHarvestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workable", data: BytesLike): Result;

  events: {
    "HarvestByGovernor(address)": EventFragment;
    "HarvestByKeeper(address)": EventFragment;
    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)": EventFragment;
    "Keep3rSet(address)": EventFragment;
    "StrategyAdded(address,uint256)": EventFragment;
    "StrategyModified(address,uint256)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HarvestByGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestByKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rRequirementsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
}

export type HarvestByGovernorEvent = TypedEvent<
  [string],
  { _strategy: string }
>;

export type HarvestByGovernorEventFilter =
  TypedEventFilter<HarvestByGovernorEvent>;

export type HarvestByKeeperEvent = TypedEvent<[string], { _strategy: string }>;

export type HarvestByKeeperEventFilter = TypedEventFilter<HarvestByKeeperEvent>;

export type Keep3rRequirementsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  {
    _bond: string;
    _minBond: BigNumber;
    _earned: BigNumber;
    _age: BigNumber;
    _onlyEOA: boolean;
  }
>;

export type Keep3rRequirementsSetEventFilter =
  TypedEventFilter<Keep3rRequirementsSetEvent>;

export type Keep3rSetEvent = TypedEvent<[string], { _keep3r: string }>;

export type Keep3rSetEventFilter = TypedEventFilter<Keep3rSetEvent>;

export type StrategyAddedEvent = TypedEvent<
  [string, BigNumber],
  { _strategy: string; _requiredHarvest: BigNumber }
>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export type StrategyModifiedEvent = TypedEvent<
  [string, BigNumber],
  { _strategy: string; _requiredHarvest: BigNumber }
>;

export type StrategyModifiedEventFilter =
  TypedEventFilter<StrategyModifiedEvent>;

export type StrategyRemovedEvent = TypedEvent<[string], { _strategy: string }>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export interface IDforceStrategyKeep3r extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDforceStrategyKeep3rInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    age(overrides?: CallOverrides): Promise<[BigNumber] & { _age: BigNumber }>;

    bond(overrides?: CallOverrides): Promise<[string] & { _bond: string }>;

    calculateHarvest(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    earned(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _earned: BigNumber }>;

    forceHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDforceStrategyKeep3r(overrides?: CallOverrides): Promise<[boolean]>;

    keep3r(overrides?: CallOverrides): Promise<[string] & { _keep3r: string }>;

    minBond(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _minBond: BigNumber }>;

    onlyEOA(
      overrides?: CallOverrides
    ): Promise<[boolean] & { _onlyEOA: boolean }>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _strategies: string[] }>;

    updateRequiredHarvestAmount(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addStrategy(
    _strategy: string,
    _requiredHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  age(overrides?: CallOverrides): Promise<BigNumber>;

  bond(overrides?: CallOverrides): Promise<string>;

  calculateHarvest(
    _strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(overrides?: CallOverrides): Promise<BigNumber>;

  forceHarvest(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDforceStrategyKeep3r(overrides?: CallOverrides): Promise<boolean>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  minBond(overrides?: CallOverrides): Promise<BigNumber>;

  onlyEOA(overrides?: CallOverrides): Promise<boolean>;

  removeStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3r(
    _keep3r: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeep3rRequirements(
    _bond: string,
    _minBond: BigNumberish,
    _earned: BigNumberish,
    _age: BigNumberish,
    _onlyEOA: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(overrides?: CallOverrides): Promise<string[]>;

  updateRequiredHarvestAmount(
    _strategy: string,
    _requiredHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<string>;

    calculateHarvest(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceHarvest(_strategy: string, overrides?: CallOverrides): Promise<void>;

    harvest(_strategy: string, overrides?: CallOverrides): Promise<void>;

    isDforceStrategyKeep3r(overrides?: CallOverrides): Promise<boolean>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<boolean>;

    removeStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    setKeep3r(_keep3r: string, overrides?: CallOverrides): Promise<void>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(overrides?: CallOverrides): Promise<string[]>;

    updateRequiredHarvestAmount(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "HarvestByGovernor(address)"(
      _strategy?: null
    ): HarvestByGovernorEventFilter;
    HarvestByGovernor(_strategy?: null): HarvestByGovernorEventFilter;

    "HarvestByKeeper(address)"(_strategy?: null): HarvestByKeeperEventFilter;
    HarvestByKeeper(_strategy?: null): HarvestByKeeperEventFilter;

    "Keep3rRequirementsSet(address,uint256,uint256,uint256,bool)"(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;
    Keep3rRequirementsSet(
      _bond?: null,
      _minBond?: null,
      _earned?: null,
      _age?: null,
      _onlyEOA?: null
    ): Keep3rRequirementsSetEventFilter;

    "Keep3rSet(address)"(_keep3r?: null): Keep3rSetEventFilter;
    Keep3rSet(_keep3r?: null): Keep3rSetEventFilter;

    "StrategyAdded(address,uint256)"(
      _strategy?: null,
      _requiredHarvest?: null
    ): StrategyAddedEventFilter;
    StrategyAdded(
      _strategy?: null,
      _requiredHarvest?: null
    ): StrategyAddedEventFilter;

    "StrategyModified(address,uint256)"(
      _strategy?: null,
      _requiredHarvest?: null
    ): StrategyModifiedEventFilter;
    StrategyModified(
      _strategy?: null,
      _requiredHarvest?: null
    ): StrategyModifiedEventFilter;

    "StrategyRemoved(address)"(_strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(_strategy?: null): StrategyRemovedEventFilter;
  };

  estimateGas: {
    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    age(overrides?: CallOverrides): Promise<BigNumber>;

    bond(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHarvest(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(overrides?: CallOverrides): Promise<BigNumber>;

    forceHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDforceStrategyKeep3r(overrides?: CallOverrides): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    minBond(overrides?: CallOverrides): Promise<BigNumber>;

    onlyEOA(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(overrides?: CallOverrides): Promise<BigNumber>;

    updateRequiredHarvestAmount(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workable(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrategy(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    age(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateHarvest(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceHarvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDforceStrategyKeep3r(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyEOA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3r(
      _keep3r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3rRequirements(
      _bond: string,
      _minBond: BigNumberish,
      _earned: BigNumberish,
      _age: BigNumberish,
      _onlyEOA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRequiredHarvestAmount(
      _strategy: string,
      _requiredHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workable(
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
