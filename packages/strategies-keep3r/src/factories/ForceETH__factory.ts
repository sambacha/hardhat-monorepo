/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ForceETH, ForceETHInterface } from "../ForceETH";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405260405160593803806059833981016040819052601e91602a565b806001600160a01b0316ff5b600060208284031215603b57600080fd5b81516001600160a01b0381168114605157600080fd5b939250505056fe";

type ForceETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForceETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ForceETH__factory extends ContractFactory {
  constructor(...args: ForceETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ForceETH> {
    return super.deploy(_to, overrides || {}) as Promise<ForceETH>;
  }
  getDeployTransaction(
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_to, overrides || {});
  }
  attach(address: string): ForceETH {
    return super.attach(address) as ForceETH;
  }
  connect(signer: Signer): ForceETH__factory {
    return super.connect(signer) as ForceETH__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForceETHInterface {
    return new utils.Interface(_abi) as ForceETHInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ForceETH {
    return new Contract(address, _abi, signerOrProvider) as ForceETH;
  }
}
