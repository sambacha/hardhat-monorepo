/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GenericKeep3rV2Interface extends utils.Interface {
  functions: {
    "KP3R()": FunctionFragment;
    "WETH()": FunctionFragment;
    "keep3rHelper()": FunctionFragment;
    "requiredHarvest(address)": FunctionFragment;
    "requiredTend(address)": FunctionFragment;
    "slidingOracle()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "KP3R", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keep3rHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredHarvest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slidingOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "KP3R", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keep3rHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredTend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slidingOracle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GenericKeep3rV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenericKeep3rV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KP3R(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    keep3rHelper(overrides?: CallOverrides): Promise<[string]>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requiredTend(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    slidingOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  KP3R(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  keep3rHelper(overrides?: CallOverrides): Promise<string>;

  requiredHarvest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  requiredTend(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  slidingOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    KP3R(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    keep3rHelper(overrides?: CallOverrides): Promise<string>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredTend(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    slidingOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    KP3R(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rHelper(overrides?: CallOverrides): Promise<BigNumber>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredTend(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    slidingOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KP3R(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredHarvest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredTend(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slidingOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
