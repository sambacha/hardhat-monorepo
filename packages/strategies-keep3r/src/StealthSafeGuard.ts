/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StealthSafeGuardInterface extends utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "acceptManager()": FunctionFragment;
    "addExecutor(address)": FunctionFragment;
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "executors()": FunctionFragment;
    "governor()": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "manager()": FunctionFragment;
    "overrideGuardChecks()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "pendingManager()": FunctionFragment;
    "removeExecutor(address)": FunctionFragment;
    "sendDust(address,address,uint256)": FunctionFragment;
    "setOverrideGuardChecks(bool)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPendingManager(address)": FunctionFragment;
    "setStealthRelayer(address)": FunctionFragment;
    "stealthRelayer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addExecutor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "executors", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "overrideGuardChecks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeExecutor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendDust",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOverrideGuardChecks",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStealthRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stealthRelayer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overrideGuardChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOverrideGuardChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStealthRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealthRelayer",
    data: BytesLike
  ): Result;

  events: {
    "DustSent(address,address,uint256)": EventFragment;
    "GovernorAccepted()": EventFragment;
    "ManagerAccepted()": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingGovernorSet(address)": EventFragment;
    "PendingManagerSet(address)": EventFragment;
    "StealthRelayerSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DustSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingGovernorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealthRelayerSet"): EventFragment;
}

export type DustSentEvent = TypedEvent<
  [string, string, BigNumber],
  { _to: string; token: string; amount: BigNumber }
>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export type GovernorAcceptedEvent = TypedEvent<[], {}>;

export type GovernorAcceptedEventFilter =
  TypedEventFilter<GovernorAcceptedEvent>;

export type ManagerAcceptedEvent = TypedEvent<[], {}>;

export type ManagerAcceptedEventFilter = TypedEventFilter<ManagerAcceptedEvent>;

export type PausedEvent = TypedEvent<[boolean], { _paused: boolean }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PendingGovernorSetEvent = TypedEvent<
  [string],
  { pendingGovernor: string }
>;

export type PendingGovernorSetEventFilter =
  TypedEventFilter<PendingGovernorSetEvent>;

export type PendingManagerSetEvent = TypedEvent<
  [string],
  { pendingManager: string }
>;

export type PendingManagerSetEventFilter =
  TypedEventFilter<PendingManagerSetEvent>;

export type StealthRelayerSetEvent = TypedEvent<
  [string],
  { _stealthRelayer: string }
>;

export type StealthRelayerSetEventFilter =
  TypedEventFilter<StealthRelayerSetEvent>;

export interface StealthSafeGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StealthSafeGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    executors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _executorsArray: string[] }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGovernor: boolean }>;

    isManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isManager: boolean }>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    overrideGuardChecks(overrides?: CallOverrides): Promise<[boolean]>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    pendingManager(overrides?: CallOverrides): Promise<[string]>;

    removeExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOverrideGuardChecks(
      _overrideGuardChecks: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stealthRelayer(overrides?: CallOverrides): Promise<[string]>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAfterExecution(
    arg0: BytesLike,
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  checkTransaction(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: string,
    arg8: string,
    arg9: BytesLike,
    msgSender: string,
    overrides?: CallOverrides
  ): Promise<void>;

  executors(overrides?: CallOverrides): Promise<string[]>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  overrideGuardChecks(overrides?: CallOverrides): Promise<boolean>;

  pause(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  pendingManager(overrides?: CallOverrides): Promise<string>;

  removeExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendDust(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOverrideGuardChecks(
    _overrideGuardChecks: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingManager(
    _pendingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStealthRelayer(
    _stealthRelayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stealthRelayer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    acceptManager(overrides?: CallOverrides): Promise<void>;

    addExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executors(overrides?: CallOverrides): Promise<string[]>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    overrideGuardChecks(overrides?: CallOverrides): Promise<boolean>;

    pause(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    pendingManager(overrides?: CallOverrides): Promise<string>;

    removeExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOverrideGuardChecks(
      _overrideGuardChecks: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingManager(
      _pendingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stealthRelayer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DustSent(address,address,uint256)"(
      _to?: null,
      token?: null,
      amount?: null
    ): DustSentEventFilter;
    DustSent(_to?: null, token?: null, amount?: null): DustSentEventFilter;

    "GovernorAccepted()"(): GovernorAcceptedEventFilter;
    GovernorAccepted(): GovernorAcceptedEventFilter;

    "ManagerAccepted()"(): ManagerAcceptedEventFilter;
    ManagerAccepted(): ManagerAcceptedEventFilter;

    "Paused(bool)"(_paused?: null): PausedEventFilter;
    Paused(_paused?: null): PausedEventFilter;

    "PendingGovernorSet(address)"(
      pendingGovernor?: null
    ): PendingGovernorSetEventFilter;
    PendingGovernorSet(pendingGovernor?: null): PendingGovernorSetEventFilter;

    "PendingManagerSet(address)"(
      pendingManager?: null
    ): PendingManagerSetEventFilter;
    PendingManagerSet(pendingManager?: null): PendingManagerSetEventFilter;

    "StealthRelayerSet(address)"(
      _stealthRelayer?: null
    ): StealthRelayerSetEventFilter;
    StealthRelayerSet(_stealthRelayer?: null): StealthRelayerSetEventFilter;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executors(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isManager(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    overrideGuardChecks(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    pendingManager(overrides?: CallOverrides): Promise<BigNumber>;

    removeExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOverrideGuardChecks(
      _overrideGuardChecks: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stealthRelayer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: string,
      arg8: string,
      arg9: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overrideGuardChecks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendDust(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOverrideGuardChecks(
      _overrideGuardChecks: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingManager(
      _pendingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStealthRelayer(
      _stealthRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stealthRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
